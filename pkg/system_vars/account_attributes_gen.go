package sv

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// MarshalMsg implements msgp.Marshaler
func (z AccountAttributes) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendMapHeader(o, uint32(len(z)))
	for za0001, za0002 := range z {
		o = msgp.AppendString(o, za0001)
		o = msgp.AppendMapHeader(o, uint32(len(za0002)))
		for za0003, _ := range za0002 {
			o = msgp.AppendString(o, za0003)
			// map header, size 0
			o = append(o, 0x80)
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *AccountAttributes) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0005 uint32
	zb0005, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if (*z) == nil {
		(*z) = make(AccountAttributes, zb0005)
	} else if len((*z)) > 0 {
		for key := range *z {
			delete((*z), key)
		}
	}
	for zb0005 > 0 {
		var zb0001 string
		var zb0002 map[string]struct {
		}
		zb0005--
		zb0001, bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		var zb0006 uint32
		zb0006, bts, err = msgp.ReadMapHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, zb0001)
			return
		}
		if zb0002 == nil {
			zb0002 = make(map[string]struct {
			}, zb0006)
		} else if len(zb0002) > 0 {
			for key := range zb0002 {
				delete(zb0002, key)
			}
		}
		for zb0006 > 0 {
			var zb0003 string
			var zb0004 struct {
			}
			zb0006--
			zb0003, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001)
				return
			}
			var field []byte
			_ = field
			var zb0007 uint32
			zb0007, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, zb0001, zb0003)
				return
			}
			for zb0007 > 0 {
				zb0007--
				field, bts, err = msgp.ReadMapKeyZC(bts)
				if err != nil {
					err = msgp.WrapError(err, zb0001, zb0003)
					return
				}
				switch msgp.UnsafeString(field) {
				default:
					bts, err = msgp.Skip(bts)
					if err != nil {
						err = msgp.WrapError(err, zb0001, zb0003)
						return
					}
				}
			}
			zb0002[zb0003] = zb0004
		}
		(*z)[zb0001] = zb0002
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z AccountAttributes) Msgsize() (s int) {
	s = msgp.MapHeaderSize
	if z != nil {
		for zb0008, zb0009 := range z {
			_ = zb0009
			s += msgp.StringPrefixSize + len(zb0008) + msgp.MapHeaderSize
			if zb0009 != nil {
				for zb0010, zb0011 := range zb0009 {
					_ = zb0011
					s += msgp.StringPrefixSize + len(zb0010) + 1
				}
			}
		}
	}
	return
}
